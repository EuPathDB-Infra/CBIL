/**
 * Copyright (C) 1999 Trustees of the University of Pennsylvania
 *
 * Computational Biology and Informatics Laboratory (CBIL),
 * University of Pennsylvania Center for Bioinformatics (www.pcbi.upenn.edu)
 */

package edu.cbil.csp.dialog;

import edu.cbil.csp.StringTemplate;

/**
 * ExpandableItemGroup.java
 *
 * An {@link edu.cbil.csp.dialog.ItemGroup} that can be "expanded" 
 * (i.e. the {@link edu.cbil.csp.dialog.Item}s within it are shown) 
 * or "collapsed" (i.e. the items within it are not shown) under 
 * user control.  Such item groups should typically be used only 
 * for sets of additional parameters that are either optional or 
 * that have default values.<p>
 *
 * Created: Fri Feb  5 20:52:56 1999
 *
 * @author Jonathan Crabtree
 */
public class ExpandableItemGroup extends ActionItemGroup implements ActionHandler {
    
    /**
     * Whether the ItemGroup is currently expanded.
     */
    protected boolean expanded;

    /**
     * Action invoked by the user to show the group's contained items.
     */
    protected Action show;

    /**
     * Action invoked by the user to hide the group's contained items.
     */
    protected Action hide;

    /**
     * Descriptions of the <code>show</code> action to present to the user.
     */
    protected String show_string;

    /**
     * Descriptions of the <code>hide</code> action to present to the user.
     */
    protected String hide_string;

    /**
     * Internal name used to identify <code>this.show</code>.
     */
    protected String show_name;

    /**
     * Internal name used to identify <code>this.hide</code>.
     */
    protected String hide_name;

    /**
     * HTML-specific.  The URL to which the group's <code>Action</code>s
     * will point.  Whatever script or program is lurking at this URL should
     * know how to direct the action request back to this object's
     * <code>handleAction</code> method.
     */
    protected String my_url;

    /**
     * Constructor.
     *
     * @param name     Unique String used to identify the action in the context
     *                 of a larger input structure (e.g. a {@link edu.cbil.csp.dialog.Dialog}).
     * @param descr    A short description of the element.
     * @param help     A help string describing the element's usage.
     * @param st       {@link edu.cbil.csp.StringTemplate} that controls the appearance of the
     *                 element itself.
     * @param ht       {@link edu.cbil.csp.StringTemplate} that controls the appearance of the
     *                 element's help text.
     * @param bgcolor         Suggested background color.
     * @param my_url          URL to which hide/show requests should be directed.
     * @param show_string     Description of the show action for the user.
     * @param hide_string     Description of the hide action for the user.
     * @param initial_state   Whether the group is initially expanded.
     */
    public ExpandableItemGroup(String name, String descr, String help,
			       StringTemplate st, StringTemplate ht, String bgcolor,
			       boolean initial_state, String my_url, 
			       String show_string, String hide_string) 
    {
	super(name, descr, help, st, ht, bgcolor);
	this.expanded = initial_state;
	this.show_string = show_string;
	this.hide_string = hide_string;
	this.show_name = name + ".SHOW";
	this.hide_name = name + ".HIDE";
	this.my_url = my_url;

	show = new Action(show_name, "Show", "help", null, null,
			  "submit", show_string, my_url);
	hide = new Action(hide_name, "Hide", "help", null, null,
			  "submit", hide_string, my_url);
    }

    //----------------
    // ActionHandler
    //----------------

    /**
     * Handle an action that was generated by 
     * either <code>hide</code> or <code>show</code>.
     * Changes the current state of the item group, which
     * must then be redisplayed.
     */
    public boolean handleAction(String value) {
	if (value.equals(show_string)) {
	    expanded = true;
	    return true;
	} else if (value.equals(hide_string)) {
	    expanded = false;
	    return true;
	}
	return false;
    }

    //--------
    // Item
    //--------

    public Item copy(String url_subs) {
	ExpandableItemGroup result = new ExpandableItemGroup(name, descr, help, template, 
							     help_template, bgcolor, expanded,
							     my_url, show_string, hide_string);
	copyItems(this, result, url_subs);
	return result;
    }

    //--------------
    // ItemGroup
    //--------------
    
    public Item getItemByName(String name, boolean recurse) {
	System.out.println("ExpandableItemGroup: called with " + name + " have show = " 
			   + show_name + 
			   "and hide = " + hide_name);

	if (name.equals(show_name)) {
	    return show;
	} else if (name.equals(hide_name)) {
	    return hide;
	}
	return super.getItemByName(name, recurse);
    }

    //--------------
    // Item
    //--------------

    public String[] getHTMLParams(String help_url) {
	String[] super_params = super.getHTMLParams(help_url);

	if (expanded) {
	    return new String[] {super_params[0] + "&nbsp;&nbsp;&nbsp;&nbsp;" + 
				     hide.makeHTML(help_url),
				     super_params[1],
				     super_params[2]};
	} else {
	    return new String[] {super_params[0] + "&nbsp;&nbsp;&nbsp;&nbsp;" + 
				     show.makeHTML(help_url),
				     super_params[1], ""};
	}
    }
    
} // ExpandableItemGroup
