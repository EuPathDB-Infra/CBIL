#!/usr/bin/perl

=pod
=head1 Name

C<CBIL::CSP::HifyToJava> - generate a Java(TM) version of C<CBIL::CSP::Hify>

=head1 Description

This package performs a single task; it generates a .java source
file that is equivalent (more or less) to C<CBIL::CSP::Hify.pm>  

The generated Java file is called HTMLUtil.java and it is accompanied
by a utility class, AH.java, that provides a convenient way of 
creating Hashtables from even-length arrays.  AH is the Java 
equivalent (more or less) of CBIL::CSP::B  It is used to store
(HTML attribute, value) pairs.

See the script "hifytojava" for an example of how to invoke this
package.

=head1 Methods
=over 4
=cut

package CBIL::CSP::HifyToJava;

use CBIL::Util::A;
use Carp;
use strict "vars";

require CBIL::CSP::Hify;

=pod
=item generateJavaHify

Generate the Java(TM) source code for Hify.

First argument is the name of the target Java(TM) package.

Second argument is the path of the corresponding directory.

=cut

# What about <LI></LI>?
# What about "missing" attributes (i.e. id, class, title)?
#

$HifyToJava::HU = "HTMLUtil";
$HifyToJava::AH = "AH";
$HifyToJava::EC = "Element";

sub generateJavaHify {
    my(
       $package,    # Java package in which to place the generated files.
       $targetdir   # Directory of that package
       ) = @_;

    # Generate auxiliary classes
    #
    writeFile("${targetdir}/$HifyToJava::AH.java", 
	      &generateArrayHashtableClass($package));

    my $util = &generateElementClass($package);

    # All essential tag information is contained in 
    # HIFY::ElementDictionary
    #
    my $elt_dict = \%HIFY::ElementDictionary;
    my $tag;

    $util .= &generateClassHeader(undef, $HifyToJava::HU, undef, "", 
				  "A set of routines that support HTML generation.");

    $util .=  "\tprotected static $HifyToJava::EC elements[] = \n\t{\n";

    # Keep track of the positions of the tag elements in the 
    # array we're generating.
    #
    my %tagnums;
    my $tagnum = 0;
    my $utag;

    # Loop over the allowed tags
    #
    foreach $tag (sort(keys %$elt_dict)) {
	$tagnums{$tag} = $tagnum++;
	$utag = $tag;
	$utag =~ tr/a-z/A-Z/;

	my $elem = $$elt_dict{$tag};

	$util .= "\t\t// TAG = \"$tag\"";
	$util .= "\n\t\tnew $HifyToJava::EC(";

	$util .= "\"$utag\", ";
	my $paired = $$elem{'p'};
	$util .= (($paired == 1) ? "true" : "false");
	$util .= ",\n\t\t  new $HifyToJava::AH(new String[] {\n";

        # Loop over the attributes for this tag
        #
	$util .= printAttrs($$elem{'a'});
	$util .= "\t\t  })";

	# Ditto for the deprecated attributes
        #
	$util .= ",\n\t\t  new $HifyToJava::AH(new String[] {\n";
	$util .= printAttrs($$elem{'d'});
	$util .= "\t\t  })";

    $util .= "),\n";
    }

    $util .= "\t\t};\n\n";

    # Generate "handler" methods to which all requests are
    # ultimately dispatched.
    #
    $util .= &generateHandlerMethods();

    # Generate two methods for each tag, one lowercase
    # and one upppercase.
    #
    foreach $tag (sort(keys %$elt_dict)) {
	my $otag = $tag;
	my $paired = ${$$elt_dict{$otag}}{'p'};

	$tag =~ tr/a-z/A-Z/;
	$util .= &generateTagMethods($tag, $tagnums{$otag}, $paired);
	$tag =~ tr/A-Z/a-z/;
	$util .= &generateTagMethods($tag, $tagnums{$otag}, $paired);
    }
   
    $util .= &generateClassFooter();

    writeFile("${targetdir}/$HifyToJava::HU.java", $util);
    return 0;
}

sub writeFile {
    my($file, $contents) = @_;
    
    open(FH, ">$file") || die "Unable to write to $file";
    print FH $contents;
    close(FH);
}

sub flattenAttrs {
    my ($aref) = @_;
    my @result;
    my $attr;

    foreach $attr (@$aref) {
	if (ref $attr eq 'ARRAY') {
	    push(@result, @$attr);
	} elsif (ref $attr eq '') {
	    push(@result, $attr);
	} else {
	    croak "HifyToJava: unrecognized data type " . (ref $attr) . " in HIFY::ElementDictionary";
	}
    }

    return @result;
}

sub printAttrs {
    my ($aref) = @_;
    my @attrs = flattenAttrs($aref);
    my $result;

    foreach my $att (@attrs) {
	my ($key, $val);
	
	if ($att =~ /\%/) {
	    $att =~ /^([^%=]+)/;
	    $key = $1;
	    $val = '%s';
	} else {
	    $key = $att;
	    $val = '';
	}
	
	$result .= "\t\t\t\"${key}\", \"${val}\",\n";
    }
    return $result;
}

=pod
=item generateHandlerMethod

All requests on the HTMLUtil object are forwarded to the Java(TM) 
handler methods generated by this Perl method.

=cut

sub generateHandlerMethods {
    my $result = <<ENDMETHODS;
    protected final static com.oroinc.text.perl.Perl5Util util = 
	new com.oroinc.text.perl.Perl5Util();

    protected final static String beginTag(Element el, $HifyToJava::AH args) {
	StringBuffer result = new StringBuffer();
	result.append('<');
	result.append(el.tag);

	$HifyToJava::AH attr = el.attribs;
	$HifyToJava::AH depr = el.depr;

	java.util.Enumeration attrs = args.keys();

	while (attrs.hasMoreElements()) {
	    String att = (String)(attrs.nextElement());
	    String descr = (String)(attr.get(att));

	    if (descr == null) {
		// TO DO: deprecated warning
		descr = (String)(depr.get(att));
	    }

	    if (descr == null) {
		System.err.println("Unknown/illegal attribute '" + att + "'" +
				   " for tag '" + el.tag + "'");
	    }

	    if (descr.equals("%s")) {
		// Attribute requires value
		//
		String val = (String)(args.get(att));

		if (val == null) {
		    System.err.println("No value specified for attribute '" + att + "'" +
				       " of tag '" + el.tag + "'");
		}

                result.append(' ');
	        result.append(att);
		result.append("=\\"" + val + "\\"");
	    } else {
		// Present/absent only
		//
                result.append(' ');
	        result.append(att);
	    }
	}

	result.append('>');
        return result.toString();
    }

    protected final static String endTag(Element el, $HifyToJava::AH args) {
	StringBuffer result = new StringBuffer();
	result.append("</");
	result.append(el.tag);
	result.append('>');
	return result.toString();
    }

    protected final static String handler(int tagnum, $HifyToJava::AH args, String content,
					  boolean omit_begin, boolean omit_end) {
	Element el = elements[tagnum];

	if (el == null) {
	    throw new IllegalArgumentException("UNKNOWN HTML TAG '" + el.tag + "'");
	}
	
	StringBuffer result = new StringBuffer();

	if (!omit_begin) result.append(beginTag(el, args));

	if (!omit_begin && !omit_end && content != null) {
	    if (!el.paired) {
		System.err.println("Error - content specified for unpaired tag '" 
				   + el.tag + "'");
	    }
	    result.append(content);
	}

	if (!omit_end && el.paired) result.append(endTag(el, args));
	return result.toString();
    }

ENDMETHODS

    return $result;
}

=pod
=item generateTagMethods

Generates all the methods in the HTMLUtil class that correspond to a
particular HTML element/tag type (e.g. BR, TABLE, TR, etc.)

=cut

sub generateTagMethods {
    my($tag, $tnum, $paired) = @_;
    my $result;

    if ($paired) {
	$result .= "public final static String $tag(String content)\n";
	$result .= "{\n";
	$result .= "    return handler($tnum, $HifyToJava::AH.E, content, false, false);\n";
	$result .= "}\n\n";
	$result .= "public final static String $tag($HifyToJava::AH args, String content)\n";
	$result .= "{\n";
	$result .= "    return handler($tnum, args, content, false, false);\n";
	$result .= "}\n\n";
	$result .= "public final static String $tag($HifyToJava::AH args, boolean omit_begin, ";
	$result .= "boolean omit_end, String content)\n";
	$result .= "{\n";
	$result .= "    return handler($tnum, args, content, omit_begin, omit_end);\n";
	$result .= "}\n\n";
    }
    $result .= "public final static String $tag()\n";
    $result .= "{\n";
    $result .= "    return handler($tnum, $HifyToJava::AH.E, null, false, false);\n";
    $result .= "}\n\n";
    $result .= "public final static String $tag($HifyToJava::AH args)\n";
    $result .= "{\n";
    $result .= "    return handler($tnum, args, null, false, false);\n";
    $result .= "}\n\n";
    $result .= "public final static String $tag($HifyToJava::AH args, boolean omit_begin, ";
    $result .= "boolean omit_end)\n";
    $result .= "{\n";
    $result .= "    return handler($tnum, args, null, omit_begin, omit_end);\n";
    $result .= "}\n\n";
    $result .= "public final static String $tag(boolean omit_begin, boolean omit_end)\n";
    $result .= "{\n";
    $result .= "    return handler($tnum, $HifyToJava::AH.E, null, omit_begin, omit_end);\n";
    $result .= "}\n\n";
    return $result;
}

=pod
=item generateClassHeader

Generates the initial section (package statement, comments, 
class inheritance declarations) of a .java file.

=cut

sub generateClassHeader {
    my ($pkg, $cname, $cmodifier, $superc, $comment) = @_;
    my $when = scalar localtime();
    my $pkgstring = ($pkg eq "") ? "" : "package ${pkg};\n\n";
    my $scstring = ($superc eq "") ? "" : "extends $superc";
    my $cmod = (defined $cmodifier) ? $cmodifier : "public";

    return <<END_HEADER;
${pkgstring}
/**
 * ${cname}
 *
 * ${comment}<P>
 *
 * \@author CBIL::CSP::HifytoJava.pm
 *
 * ${when}
 */
${cmod} class ${cname} ${scstring} {

END_HEADER
}

=pod
=item generateClassFooter

Generates the final section of a .java file.

=cut

sub generateClassFooter {
    return "}\n";
}

=pod
=item generateArrayHashtableClass

Generates the utility class "AH"; this class extends java.util.Hashtable and allows
new instances to be initialized from even-length arrays.

=cut

sub generateArrayHashtableClass {
    my ($pkg) = @_;
    my $result;

    $result = &generateClassHeader($pkg, $HifyToJava::AH, undef, "java.util.Hashtable",
				   "An easy-to-initialize class that extends Hashtable.");

    $result .= <<END_BODY;
    /**
     * Construct a new instance from an even-length array of objects.
     * Throws an exception if the array does not contain an even number
     * of elements.
     *
     * \@param arr   An even-length array of <code>Object</code>s.  The array
     *              is assumed to alternate between keys and values.
     */
    public $HifyToJava::AH(Object arr[])
    {
	super(Math.max(arr.length, 1));
	int a_length = arr.length;

	if ((a_length % 2) != 0)
	    throw new IllegalArgumentException("$HifyToJava::AH: ERROR " +
					       "- length of input array is not even.");

	for (int i = 0;i < a_length;i+=2) {
	    this.put(arr[i], arr[i+1]);
	}
    }

    /**
     * An "empty" instance of <code>AH</code>, provided for your programming convenience.
     */
    public static $HifyToJava::AH E = new $HifyToJava::AH(new Object[] {});

    /**
     * An "empty" instance of <code>AH</code>, provided for your programming convenience.
     */
    public static $HifyToJava::AH e = E;

END_BODY

    $result .= &generateClassFooter();
    return $result;
}

=pod
=item generateElementClass

Generates a utility class, Element, that is used to represent an HTML 
element/tag and the allowed attributes for that tag.  The definition
of the Element class is local to the HTMLUtil.java file.

=cut

sub generateElementClass {
    my ($pkg) = @_;
    my $result;

    $result .= &generateClassHeader($pkg, $HifyToJava::EC, "", "",
				    "A representation for HTML elements.");

    $result .= <<END_BODY;

    // Canonical tag for the element.
    //
    public String tag;

    // Whether the element is comprised of paired tags.
    //
    public boolean paired;

    // Allowed attributes
    //
    public $HifyToJava::AH attribs;

    // Deprecated attributes
    //
    public $HifyToJava::AH depr;

    public $HifyToJava::EC(String tag, boolean paired, $HifyToJava::AH attribs, 
                           $HifyToJava::AH depr)
    {
	this.tag = tag;
	this.paired = paired;
	this.attribs = attribs;
	this.depr = depr;
    }

END_BODY

    $result .= &generateClassFooter();
    return $result;
}

=pod
=back
=cut

1;
