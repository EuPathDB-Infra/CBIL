#!/usr/bin/perl

=pod
=head1 Name

C<CBIL::CSP::Dialog> - an object for managing interaction with the user.

=head1 Description

=head1 Configuration

=head1 Methods

=over 4

=cut

package CBIL::CSP::Dialog;

BEGIN {
  warn ">>> CBIL::CSP::Dialog\n";
}

@ISA = qw ( CBIL::CSP::Topic );
@EXPORT = qw ( ToHTML );

use strict vars;

use CBIL::CSP::Topic;

# ----------------------------------------------------------------------
=pod
=item new

creates a new dialog.  A dialog is like a topic, except that it has a
few extra things detailed below.

Arguments:

C<abstract> (opt) a bit of text to summarize the intent of the dialog.

C<action> (req) indicate the URL which will be used to handle the
dialog.

=cut

sub new {
  my $class = shift;
  my $args  = shift;
  
  return undef unless $args->ensure('action');
  
  my $self = new CBIL::CSP::Topic($args);

  bless $self, $class;
  
  $self->copy($args, 'action', 'abstract');
  
  return $self;
}

# ----------------------------------------------------------------------
=pod
=item ToHTML

outputs the dialog in HTML form according to the configured style.

B<Returns:> string containing the HTML.

=cut

sub ToHTML {
  my $self = shift;

  my $code 
    = $CBIL::CSP::Dialog::StyleConnection{$self->{style_config}->{dialog_style}};

  $code = "_plain_ToHTML" unless defined $code;
  
  $self->$code();
}

%CBIL::CSP::Dialog::StyleConnection
  = (
     plain => "_plain_ToHTML",
    );
 
# ----------------------------------------------------------------------
=pod
=item _plain_ToHTML

outputs in the plain style

=cut

sub _plain_ToHTML {
  my $self = shift;

  # text(friendly)
  my $s_name
#    = $self->tableRow(new TO 
#		      +{viz => $self->tableHeader(new TO 
#						  +{ viz => $self->{text},
#						     align => 'left',
#						     bgcolor => $self->{style_config}->{CSP_Dialog_TitleBgcolor},
#						   }),
#		       })
    ;
  
  # abstract
  my $s_abstract 
    = $self->tableRow(new TO 
		      +{viz => 
			$self->tableData(new TO 
					 +{viz => 
					   $self->italics(new TO 
							  +{viz => 
							    "<B>Abstract:</B> $self->{abstract}"
							   }),
					   align => 'left',
					   bgcolor => 
					   $self->{style_config}->{CSP_Dialog_AbstractBgcolor},
					  }),
		       });
  # inputs
  my $s_inputs
    = $self->cast(CBIL::CSP::Topic)->tableRow(new TO
					+{viz => $self->makeDisplay()
					 });
  $self->tsac();
  
  # trailer
  my $now = localtime;
  my $s_trailer
    = $self->tableRow(new TO
		      +{viz => $self->tableData(new TO
						+{viz => "generated by CSP at $now.",
						  align => "center",
						 })
		       });
  # contents
  my $s_contents
    = $self->table(new TO 
		   +{viz => $s_name 
		     . $s_abstract 
		     . $s_inputs 
		     . $s_trailer,
		     '!' => "dialog: s_contents for $self->{name}"
		    });
  
  # stuff the whole thing in a form

  return $self->form(new CBIL::Util::A +{
			      action => $self->{action},
			      viz => $s_contents 
			     });
}

# ----------------------------------------------------------------------
=pod
=item table

Overrides others to set borders based on config_style.

=cut

sub table {
  my $me = shift;
  my $args = shift;

  $args->{border} = ($me->{style_config}->{CSP_Dialog_Borders} || 0)
    unless defined $args->{border};

  return $me->SUPER::table($args);
}

# ----------------------------------------------------------------------

=pod 
=back
=cut

BEGIN {
  warn "<<< CBIL::CSP::Dialog\n";
}

1;
